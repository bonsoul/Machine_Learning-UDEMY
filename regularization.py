# -*- coding: utf-8 -*-
"""regularization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-5jjW2ehSMQ3jsGBXzrP2I4HWTy-9TnI

#Regularization Techniques for Model Optimization

1. Overfitting and Underfitting

Overfitting: Occurs when a model learns the training data along with the patterns, leading to poor generalizations on unseen data.
Symptoms:
High training accuracy but low test accuracy
Large difference between training and validation losses.

Underfitting : occurs when a model is too simple to campture the underlying patterns in the data.

Symptoms
Low accuracy on both training and test sets.
High bias in predictions

Underfitting : Occurs when a model is too simple to capture the underlying patterns in the data.

Symptoms
Low accuracy on both training and test sets.

High bias in predictons.

# Regularization Techniques

Regularization introduces a penalty term to the function during model training to prevent overfitting by discouraging overly complex models.

L1 Regularizaation(Lasso)

L2 Regulazation(Ridge)

Elastic Net
"""

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Lasso, Ridge, ElasticNet, LinearRegression
from sklearn.metrics import mean_squared_error
import pandas as pd

#load the dataset

data = fetch_california_housing()
X,y = data.data, data.target

features_names = data.feature_names

# split the dataset
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

# display dataset info

print("Feature Name:\n", features_names)
print("\n Sample Data:\n",pd.DataFrame(X, columns=features_names ))

#Train Linear model

lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

#predict

y_pred = lr_model.predict(X_test)
mse_lr = mean_squared_error(y_test, y_pred)

# PRINT OUT

# PRINT OUT


print(f"Linnear Regression:,{mse_lr:.2f}")
print(f"Coefficients:\", {lr_model.coef_}")

# train ridge regression model

ridge_model = Ridge(alpha=0.1)
ridge_model.fit(X_train, y_train)

#prediction

y_pred_ridge = ridge_model.predict(X_test)
mse_ridge = mean_squared_error(y_test, y_pred_ridge)

print(f"Ridge Regression:,{mse_ridge:.2f}")
print(f"Coefficients:\", {ridge_model.coef_}")

# train ridge regression model

lasso_model = Lasso(alpha=0.1)
lasso_model.fit(X_train, y_train)

#prediction

y_pred_lasso = lasso_model.predict(X_test)
mse_lasso = mean_squared_error(y_test, y_pred_ridge)

#prediction

print(f"Lasso Regression:,{mse_lasso:.2f}")
print(f"Coefficients:\", {lasso_model.coef_}")