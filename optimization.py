# -*- coding: utf-8 -*-
"""optimization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1trr3hJpCeVE_q75dMiUAg3uksUUaR7G0
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import numpy as np
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.svm import SVC

#load the data

data = load_iris()
X, y = data.data, data.target

#split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

param_grid = {
    'n_estimators': [50, 100, 150],
    'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [3,5,7]
}

#define parameter grid
grid_search = GridSearchCV(
    estimator = GradientBoostingClassifier(random_state=42),
    param_grid = param_grid,
    scoring='accuracy',
    cv=5,
    n_jobs=-1
)

#perform Grid search
grid_search.fit(X_train, y_train)

#get_params and score
best_params = grid_search.best_params_
best_score = grid_search.best_score_
print(f"Best Parameters: {best_params}")
print(f"Best Score: {best_score}")

# get the best model
best_model = grid_search.best_estimator_

y_pred = best_model.predict(X_test)
accuracy_grid = accuracy_score(y_test, y_pred)

print(f"Test Accuracy GridSearc CV: {accuracy_grid:.4f}")
print(classification_report(y_test, y_pred))

# define parameter distribution

param_dist = {
    'C':np.logspace(-3,3,10),
    'kernel':['linear','rbf', 'poly', 'sigmoid'],
    'gamma':['scale', 'auto']
}

#initalize RandomSearchCV
random_search = GridSearchCV(
    estimator = SVC(random_state=42),
    param_grid = param_dist,
    scoring='accuracy',
    cv=5,
    n_jobs=-1

)

# Perfom Randomized Search
random_search.fit(X_train, y_train)

#best parameters and score

best_params_random = random_search.best_params_
best_score_random = random_search.best_score_
print(f"Best Parameters: {best_params_random}")
print(f"Best Score: {best_score}")

best_random_model = random_search.best_estimator_

#predict
y_pred_random = best_random_model.predict(X_test)
accuracy_random = accuracy_score(y_test, y_pred_random)

print(f"Test Accuracy Random Search: {accuracy_random:.4f}")
print(classification_report(y_test,y_pred_random))

