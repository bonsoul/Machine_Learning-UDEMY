# -*- coding: utf-8 -*-
"""Optimization Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mwPj8wBDkJsv5J7-jqzzO2HTBGF4mipZ
"""

import pandas as pd
import kagglehub
import os
import numpy as np

from sklearn.preprocessing import LabelEncoder, StandardScaler
from  sklearn.model_selection import train_test_split, RandomizedSearchCV,cross_val_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, median_absolute_error, classification_report, confusion_matrix

import kagglehub

# Download latest version
path = kagglehub.dataset_download("blastchar/telco-customer-churn")

print("Path to dataset files:", path)

# Download the latest version of the dataset
path = kagglehub.dataset_download("blastchar/telco-customer-churn")

print("Path to dataset files:", path)

# Look for the CSV file in the downloaded directory
for file in os.listdir(path):
    if file.endswith(".csv"):
        dataset_path = os.path.join(path, file)
        break

# Load the dataset into a DataFrame
df = pd.read_csv(dataset_path)

# Display the first few rows
df.head()

# display dataset info
df.info()

df['Churn'].value_counts()

df.isnull().sum()

# handling missing values

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.fillna({'TotalCharges': df['TotalCharges'].median()}, inplace=True)

#encode categorical variables

label_encoder = LabelEncoder()

for column in df.select_dtypes(include=['object']).columns:
    if column != 'Churn':
      df[column] = label_encoder.fit_transform(df[column])

#scale numerical features

scaler = StandardScaler()

numerical_features = ['tenure','MonthlyCharges','TotalCharges']
df[numerical_features] = scaler.fit_transform(df[numerical_features])

# features and Target
X = df.drop(columns=['Churn'])
y = df['Churn']

# split the dataset

X_train,X_test,y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42)

# train initial model

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# evaluate initial model

y_pred = rf_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)


print(f"Initial Model Accuracy: {accuracy:.2f}")

print(f"Classification report : {classification_report(y_test,y_pred)}")

# define parameter grid

param_dist = {
    'n_estimators': np.arange(50,100,200),
    'max_depth' : [None, 5, 10, 15],
    'min_samples_split': [2,5,10,20],
    'min_samples_leaf': [1,2,4]

}

# initialize RandomizedSearchCV

random_search = RandomizedSearchCV(
    estimator = RandomForestClassifier(random_state=42),
    param_distributions=param_dist,
    n_iter=20,
    cv=5,
    verbose=2,
    random_state=42,
    n_jobs=-1
)

# perform

random_search.fit(X_train, y_train)


# best parameters

best_params = random_search.best_params_
print(f"Best Parameters (RandomizedSearchCV): {best_params}")

# train best model

best_model = random_search.best_estimator_
y_pred_best = best_model.predict(X_test)
accuracy_best = accuracy_score(y_test, y_pred_best)

print(f"Accuracy Score : {accuracy_best}")
print(f"Clasification Report : {classification_report(y_test, y_pred_best)}")

# evaluate using Cross-Validation

cv_scores = cross_val_score(best_model, X, y, cv=5, scoring='accuracy')
print(f"Cross-Validation Scores: {cv_scores}")
print(f"Mean CV : {cv_scores.mean():.4f}")