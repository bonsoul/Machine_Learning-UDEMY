# -*- coding: utf-8 -*-
"""Saudi Arabian Grand Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GU6TRBLrltl2--AVY_ryLMGYyjrV2ags
"""


import fastf1
import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create the cache directory if it doesn't exist
cache_dir = 'f1_cache'
if not os.path.exists(cache_dir):
    os.makedirs(cache_dir)

# Enable FastF1 caching
fastf1.Cache.enable_cache(cache_dir)

#load FastF1 2024 Australian GP
gp_2024  = fastf1.get_session(2024, 'China', "R")
gp_2024.load()

#extract lap times

laps_2024 = gp_2024.laps[["Driver", "LapTime"]].copy()
laps_2024.reset_index(drop=True, inplace=True)
laps_2024["LapTime (s)"] = laps_2024["LapTime"].dt.total_seconds()
laps_2024.head()

#2025 Qualifying Data Chinese GP

qualifying_2025 = pd.DataFrame({
    "Driver": ["Oscar Piastri", "George Russell", "Lando Norris", "Max Verstappen", "Lewis Hamilton",
               "Charles Leclerc", "Isack Hadjar", "Andrea Kimi Antonelli", "Yuki Tsunoda", "Alexander Albon",
               "Esteban Ocon", "Nico H√ºlkenberg", "Fernando Alonso", "Lance Stroll", "Carlos Sainz Jr.",
               "Pierre Gasly", "Oliver Bearman", "Jack Doohan", "Gabriel Bortoleto", "Liam Lawson"],
    "QualifyingTime (s)": [90.641, 90.723, 90.793, 90.817, 90.927,
                           91.021, 91.079, 91.103, 91.638, 91.706,
                           91.625, 91.632, 91.688, 91.773, 91.840,
                           91.992, 92.018, 92.092, 92.141, 92.174]
})

# Map full names to FastF1 3-letter codes
driver_mapping = {
    "Oscar Piastri": "PIA", "George Russell": "RUS", "Lando Norris": "NOR", "Max Verstappen": "VER",
    "Lewis Hamilton": "HAM", "Charles Leclerc": "LEC", "Isack Hadjar": "HAD", "Andrea Kimi Antonelli": "ANT",
    "Yuki Tsunoda": "TSU", "Alexander Albon": "ALB", "Esteban Ocon": "OCO", "Nico H√ºlkenberg": "HUL",
    "Fernando Alonso": "ALO", "Lance Stroll": "STR", "Carlos Sainz Jr.": "SAI", "Pierre Gasly": "GAS",
    "Oliver Bearman": "BEA", "Jack Doohan": "DOO", "Gabriel Bortoleto": "BOR", "Liam Lawson": "LAW"
}

qualifying_2025["DriverCode"] = qualifying_2025["Driver"].map(driver_mapping)

#merge 2025 Qualifying Data with 2024 Race Data
merged_data = qualifying_2025.merge(laps_2024, left_on="DriverCode", right_on="Driver")

merged_data.dropna(subset=['LapTime (s)'], inplace=True)

# split the data
X = merged_data[["QualifyingTime (s)"]]
y = merged_data["LapTime (s)"]

if X.shape[0] == 0:
  raise ValueError("Dataset is empty after preprocessing. Check data sources")

#train Gradient Boosting Model
X_train, X_test, y_train, y_test = train_test_split(
    X,y, test_size=0.2, random_state=39
)

model = GradientBoostingRegressor(n_estimators=100,learning_rate=0.1,random_state=39)
model.fit(X_train, y_train)

# Predict using 2025 qualifying times
predicted_lap_times = model.predict(qualifying_2025[["QualifyingTime (s)"]])
qualifying_2025["PredictedRaceTime (s)"] = predicted_lap_times



# Sort drivers by predicted race time
qualifying_2025_sorted = qualifying_2025.sort_values(by="PredictedRaceTime (s)").reset_index(drop=True)

# Display the title
print("üèÅ Predicted 2025 Saudi Arabian GP üèÅ\n")

# Get the winner
winner = qualifying_2025_sorted.iloc[0]

# Print the predicted winner
print(f"ü•á Predicted Winner: {winner['Driver']} - {winner['PredictedRaceTime (s)']:.3f} seconds\n")

# Print the full table in a clean format
print("üìä Full Predicted Finishing Order:\n")
print(qualifying_2025_sorted[['Driver', 'PredictedRaceTime (s)']].to_string(index=False))


# evaluate model
y_pred = model.predict(X_test)
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.2f} seconds")