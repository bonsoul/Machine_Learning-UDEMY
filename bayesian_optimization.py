# -*- coding: utf-8 -*-
"""Bayesian Optimization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NBc74opoAyvnVA3PqyukZT1bnNeSunBG

Bayesian Optimization:

>> Advanced method for hyperparameter tuning the balances exploration {searching new regions} and exploitation (refining promising regions)

>> Uses a probabilistic model to guide the search for optimal hyperparameters

>> How it works
    1. Surrogate Model - builds a probabilistic model(Gaussian Process) of the abjective function based on prior evaluations.
    2. Acquisition Function - Balances exploration and exploitation by choosing the next hyper parameters to evaluate based on predicted perfomance and uncertainty.
    3.Iterative Refinement: Updates the surrogate model after each evaluation refining the search.

>> Why use Bayessian Optimization? - Efficient for high-dimensional and expensive to evaluate function. Reduces the number of evaluation required to find near-optimal hyperparameters.

Popular Libraries:
>> Hyperpt - Simplies Bayesian Optimization for hyperparameter tuning.
Works with fmin to minimize objective functions over a parameter space.

>> Optuna - flexible and user-friendly library  for hyperparameter optmization.
Supports dynamic search spaces and pruning of unpromising trials.

# Exploration vs Exploitation

Exploration - Focuses on sampling hyperparameters from unexplored regions.
Useful for identifying new areas of high potential


Exploitation - Focus on refining the search around regions with known high perfomance.
Useful for fine-tuning near optimal hyperparameters.

Bayesian Optimization's Advantage
Balance these approaches using the acquisition function to minimize unnecessary evaluations while improving results.
"""

!pip install optuna

from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler
import pandas as pd
import optuna
from xgboost import XGBClassifier
from hyperopt import fmin, tpe, hp, STATUS_OK, Trials
from sklearn.metrics import accuracy_score

#load the dataset

data = load_breast_cancer()
X, y = data.data, data.target

#split the dataset

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#standardize features

scaler = StandardScaler()
X_train= scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print(f"Training data shape: {X_train.shape}")
print(f"Testing data shape: {X_test.shape}")

# train a baseline XGBoost model

baseline_model = XGBClassifier(level_metric='logloss',random_state=42)
baseline_model.fit(X_train, y_train)

# evaluate the model

baseline = baseline_model.predict(X_test)
baseline_accuracy = accuracy_score(y_test, baseline)
print(f"Baseline Accuracy: {baseline_accuracy}")

# define the objective function for optuna

def objective(trial):
    params = {
        'n_estimators': trial.suggest_int('n_estimators', 50, 500),
        'max_depth': trial.suggest_int('n_estimators', 50, 500),
        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),
        'subsample': trial.suggest_float('subsample', 0.6, 1.0),
        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),
        'gamma': trial.suggest_float('gamma', 0.0, 1.0),
        'reg_alpha': trial.suggest_float('reg_alpha', 0.0, 10),
        'reg_lambda': trial.suggest_float('reg_lambda', 0.0, 10)

    }
    model = XGBClassifier(eval_metric='logloss', random_state=42, **params)
    model.set_params(**params)
    model.fit(X_train, y_train)

    #evaluate model
    preds = model.predict(X_test)
    accuracy = accuracy_score(y_test, preds)
    return accuracy

#create an optuna study - This was incorrectly indented inside the objective function. Moved outside to fix the IndentationError.
study = optuna.create_study(direction='maximize')
study.optimize(objective, n_trials=50)

#best hyperparameters
best_params = study.best_params
print("Best Hyperparameters:",best_params)
print("Best Accuracy:", study.best_value)

#create an Optuna Study

study = optuna.create_study(direction='maximize')
study.optimize(objective, n_trials=50)

# best hyperparameters

print("Best Hyperparameters:", study.best_params)
print("Best Accuracy:", study.best_value)

# define parameter grid

param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [3, 5,7],
    'learning_rate': [0.01, 0.1,0.2],
    'subsample': [0.8, 0.9, 1.0],
    'colsample_bytree' : [0.8, 0.9, 1.0]
}

#train XGBoost with Grid Search

grid_search = GridSearchCV(
    estimator=XGBClassifier(eval_metric='logloss',random_state=42),
    param_grid=param_grid,
    scoring='accuracy',
    cv=3,
    verbose=1
)

grid_search.fit(X_train, y_train)

#best parameters

print("Best Parameters:", grid_search.best_params_)
print("Best Accuracy:", grid_search.best_score_)

#define parameter distibution

param_dist = {
    'n_estimators': [50, 100, 200, 300, 400],
    'max_depth': [3 ,5, 7, 9],
    'learning_rate': [0.01, 0.05, 0.1, 0.2],
    'subsample': [0.8, 1.0, 1.2],
    'colsample_bytree': [0.8, 1.0, 1.2]
}

# train XGBoost with Random Search

random_search = RandomizedSearchCV(
    estimator=XGBClassifier(eval_metric='logloss',random_state=42),
    param_distributions=param_dist,
    n_iter=10,
    scoring='accuracy',
    cv=3,
    verbose=1,
    random_state=42
)

random_search.fit(X_train, y_train)

#print best parameters

print("\n\n\n Random Search Best Parameters:", random_search.best_params_)
print("Best Accuracy:", random_search.best_score_)

