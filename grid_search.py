# -*- coding: utf-8 -*-
"""Grid Search

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AtOjzg9dTQvxPrm1Vn9dtZPeAznoxgl7
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
import numpy as np

#load the dataset

data = load_iris()
X, y = data.data, data.target

#split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# display the dataset

print(f"Display the features : {data.feature_names}")
print(f"Display the target : {data.target_names}")

# define hyperparameter
param_grid = {'n_estimators': [50, 100, 150],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 20]}

# initialize Grid Search

grid_search = GridSearchCV(
    estimator=RandomForestClassifier(),
    param_grid=param_grid,
    scoring='accuracy',
    n_jobs=-1
)

# perform Grid Search
grid_search.fit(X_train, y_train)

#evaluate best model

best_model = grid_search.best_estimator_
y_pred_grid = best_model.predict(X_test)
accuracy_grid = accuracy_score(y_test, y_pred_grid)


print(f"Best Parameters : {grid_search.best_params_}")
print(f"Accuracy Score : {accuracy_grid}")

# define hyperparameters distribution
param_dist = {
    'n_estimators' : [50, 100, 150],
    'max_depth' : [None, 10, 20],
    'min_samples_split' : [2, 5, 10]
}

# initialize Random Search
random_search = RandomizedSearchCV(
    estimator = RandomForestClassifier(random_state=42),
    param_distributions = param_dist,
    n_iter = 10,
    cv=5,
    scoring = 'accuracy',
    n_jobs = -1)

# perform Random Search

random_search.fit(X_train, y_train)

#evaluate best model

best_random_model = random_search.best_estimator_
y_pred_random = best_random_model.predict(X_test)
accuracy_random = accuracy_score(y_test, y_pred_random)


print(f"Best Parameters : {random_search.best_params_}")
print(f"Random Accuracy : {accuracy_random}")

